{"version":3,"sources":["components/auth/Box.tsx","components/auth/Form.tsx","pages/SignupPage.tsx","components/ui/Button.tsx","styles/theme.ts","components/Form/Field.tsx"],"names":["Box","styled","div","Form","form","initialForm","signupEmail","signupPassword","UserSchema","Yup","shape","email","required","min","SignupPage","dispatch","useDispatch","isLoading","useSelector","state","ui","formik","useFormik","initialValues","validationSchema","onSubmit","values","startSignup","password","className","handleSubmit","autoComplete","name","type","style","display","htmlFor","value","onChange","handleChange","id","errors","touched","disabled","color","full","size","center","to","Button","button","attrs","props","colors","roundedLeft","primary","secondary","danger","black","Field"],"mappings":"yHAEMA,E,KAAMC,EAAOC,IAAV,+QAcMF,O,8CCdTG,E,KAAOF,EAAOG,KAAV,iDAIKD,O,iCCNf,sHAcME,EAAc,CAClBC,YAAa,GACbC,eAAgB,IAGZC,EAAaC,MAAaC,MAAM,CACpCJ,YAAaG,MACVE,MAAM,qCACNC,SAAS,qCACZL,eAAgBE,MACbI,IAAI,EAAG,+CACPD,SAAS,0BA+ECE,UA5Ef,WACE,IAAMC,EAAWC,cAETC,EAAcC,aAAY,SAACC,GAAD,OAAsBA,EAAMC,MAAtDH,UAEFI,EAASC,YAAU,CACvBC,cAAelB,EACfmB,iBAAkBhB,EAClBiB,SAAU,SAACC,GACTX,EACEY,YAAY,CACVhB,MAAOe,EAAOpB,YACdsB,SAAUF,EAAOnB,qBAMzB,OACE,eAAC,IAAD,WACE,cAAC,IAAD,IACA,oBAAIsB,UAAU,YAAd,oBACA,eAAC,IAAD,CAAMJ,SAAUJ,EAAOS,aAAcC,aAAa,MAAlD,UACE,uBACEA,aAAa,QACbC,KAAK,SACLC,KAAK,OACLC,MAAO,CACLC,QAAS,UAGb,eAAC,IAAD,WACE,uBAAOC,QAAQ,QAAf,2BACA,uBACEC,MAAOhB,EAAOK,OAAOpB,YACrBgC,SAAUjB,EAAOkB,aACjBN,KAAK,QACLD,KAAK,cACLQ,GAAG,cACHT,aAAa,iBAEdV,EAAOoB,OAAOnC,aAAee,EAAOqB,QAAQpC,YAC3C,qBAAKuB,UAAU,QAAf,SAAwBR,EAAOoB,OAAOnC,cACpC,QAEN,eAAC,IAAD,WACE,uBAAO8B,QAAQ,WAAf,sBACA,uBACEC,MAAOhB,EAAOK,OAAOnB,eACrB+B,SAAUjB,EAAOkB,aACjBN,KAAK,WACLD,KAAK,iBACLQ,GAAG,iBACHT,aAAa,iBAEdV,EAAOoB,OAAOlC,gBAAkBc,EAAOqB,QAAQnC,eAC9C,qBAAKsB,UAAU,QAAf,SAAwBR,EAAOoB,OAAOlC,iBACpC,QAEN,cAAC,IAAD,CACEoC,SAAU1B,EACVgB,KAAK,SACLW,MAAM,YACNC,MAAM,EAJR,SAMG5B,EAAY,cAAC,IAAD,CAAQ6B,KAAK,KAAKC,QAAQ,IAAW,cAGtD,iEACmC,IACjC,cAAC,IAAD,CAAMC,GAAG,kBAAT,6B,4DCxFFC,EAAShD,IAAOiD,OAAOC,OAAM,SAACC,GAAD,MAAY,CAC9CnB,KAAMmB,EAAMnB,MAAQ,YADNhC,CAAH,yXAGS,gBAAG2C,EAAH,EAAGA,MAAH,OAAgBA,EAAQS,IAAOT,GAAS,iBAE3C,qBAAGU,YACL,oBAAsB,YAE5B,kBAA0B,YAA1B,EAAGV,MAAmC,OAAS,UAG3C,kBAAwB,OAAxB,EAAGE,KAA4B,SAAW,YAI9C,qBAAGD,KAAmB,OAAS,QAO1BI,O,gCChCf,kCAAO,IAAMI,EAAS,CACrBE,QAAS,uBACTC,UAAW,yBACXC,OAAQ,sBACRC,MAAO,oB,6CCFFC,E,KAAQ1D,EAAOC,IAAV,wrBAoCIyD","file":"static/js/8.544e1d44.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nconst Box = styled.div`\n\tborder-radius: 1.2rem;\n\tmargin: 0 auto;\n\tmargin-top: 2rem;\n\tmax-width: 40rem;\n\tpadding: 2rem;\n\t@media (min-width: 37.5em) {\n\t\tbackground-color: var(--color-bg-3);\n\t}\n\t@media (min-width: 56.25em) {\n\t\tmargin-top: 8%;\n\t}\n`;\n\nexport default Box;\n","import styled from 'styled-components';\n\nconst Form = styled.form`\n\tmargin-top: 2rem;\n`;\n\nexport default Form;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { Link } from 'react-router-dom';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { RootState } from '../redux/store';\nimport { startSignup } from '../redux/actions/auth';\nimport Box from '../components/auth/Box';\nimport Form from '../components/auth/Form';\nimport Button from '../components/ui/Button';\nimport Field from '../components/Form/Field';\nimport Loader from '../components/ui/Loader';\n\nconst initialForm = {\n  signupEmail: '',\n  signupPassword: '',\n};\n\nconst UserSchema = Yup.object().shape({\n  signupEmail: Yup.string()\n    .email('A valid email address is required')\n    .required('A valid email address is required'),\n  signupPassword: Yup.string()\n    .min(8, 'Password must be at least 8 characters long')\n    .required('Password is required'),\n});\n\nfunction SignupPage() {\n  const dispatch = useDispatch();\n\n  const { isLoading } = useSelector((state: RootState) => state.ui);\n\n  const formik = useFormik({\n    initialValues: initialForm,\n    validationSchema: UserSchema,\n    onSubmit: (values) => {\n      dispatch(\n        startSignup({\n          email: values.signupEmail,\n          password: values.signupPassword,\n        })\n      );\n    },\n  });\n\n  return (\n    <Box>\n      <ToastContainer />\n      <h1 className=\"no-margin\">Signup</h1>\n      <Form onSubmit={formik.handleSubmit} autoComplete=\"off\">\n        <input\n          autoComplete=\"false\"\n          name=\"hidden\"\n          type=\"text\"\n          style={{\n            display: 'none',\n          }}\n        />\n        <Field>\n          <label htmlFor=\"email\">Email address</label>\n          <input\n            value={formik.values.signupEmail}\n            onChange={formik.handleChange}\n            type=\"email\"\n            name=\"signupEmail\"\n            id=\"signupEmail\"\n            autoComplete=\"new-password\"\n          />\n          {formik.errors.signupEmail && formik.touched.signupEmail ? (\n            <div className=\"error\">{formik.errors.signupEmail}</div>\n          ) : null}\n        </Field>\n        <Field>\n          <label htmlFor=\"password\">Password</label>\n          <input\n            value={formik.values.signupPassword}\n            onChange={formik.handleChange}\n            type=\"password\"\n            name=\"signupPassword\"\n            id=\"signupPassword\"\n            autoComplete=\"new-password\"\n          />\n          {formik.errors.signupPassword && formik.touched.signupPassword ? (\n            <div className=\"error\">{formik.errors.signupPassword}</div>\n          ) : null}\n        </Field>\n        <Button\n          disabled={isLoading}\n          type=\"submit\"\n          color=\"secondary\"\n          full={true}\n        >\n          {isLoading ? <Loader size=\"sm\" center={true} /> : 'Signup'}\n        </Button>\n      </Form>\n      <p>\n        Already have login and password?{' '}\n        <Link to=\"/account/signin\">Sign in</Link>\n      </p>\n    </Box>\n  );\n}\n\nexport default SignupPage;\n","import styled from 'styled-components';\nimport { colors } from '../../styles/theme';\n\ninterface ButtonProps {\n\tcolor?: 'primary' | 'secondary' | 'danger' | 'black';\n\tsize?: 'lg';\n\troundedLeft?: boolean;\n\tfull?: boolean;\n}\n\nconst Button = styled.button.attrs((props) => ({\n\ttype: props.type || 'button',\n}))<ButtonProps>`\n\tbackground-color: ${({ color }) => (color ? colors[color] : 'transparent')};\n\tborder: none;\n\tborder-radius: ${({ roundedLeft }) =>\n\t\troundedLeft ? '1.2rem 0 0 1.2rem' : '1.2rem'};\n\tbox-shadow: 0px 0.2rem 1.2rem rgba(0, 0, 0, 0.04);\n\tcolor: ${({ color }) => (color === 'primary' ? '#000' : '#fff')};\n\tcursor: pointer;\n\tfont-family: inherit;\n\tfont-size: ${({ size }) => (size === 'lg' ? '1.6rem' : '1.4rem')};\n\tfont-weight: 700;\n\tpadding: 1.1rem 2rem;\n\ttext-align: center;\n\twidth: ${({ full }) => (full ? '100%' : null)};\n\t&:disabled {\n\t\tcursor: not-allowed;\n\t\topacity: 0.6;\n\t}\n`;\n\nexport default Button;\n","export const colors = {\n\tprimary: 'var(--color-primary)',\n\tsecondary: 'var(--color-secondary)',\n\tdanger: 'var(--color-danger)',\n\tblack: 'var(--color-bg)',\n};\n","import styled from 'styled-components';\n\nconst Field = styled.div`\n\tmargin-bottom: 3rem;\n\tlabel {\n\t\tdisplay: inline-block;\n\t\tfont-size: 1.4rem;\n\t\tmargin-bottom: 0.8rem;\n\t}\n\tinput,\n\ttextarea {\n\t\tbackground: none;\n\t\tborder: 1px solid #bdbdbd;\n\t\tborder-radius: 1.2rem;\n\t\tcolor: #fff;\n\t\tdisplay: block;\n\t\tfont-family: inherit;\n\t\tfont-size: 1.6rem;\n\t\tpadding: 2rem 1.8rem;\n\t\twidth: 100%;\n\t\ttransition: border-color 0.3s ease;\n\t}\n\tinput:focus,\n\ttextarea:focus {\n\t\tborder-color: var(--color-primary);\n\t\toutline: none;\n\t}\n\ttextarea {\n\t\theight: 11rem;\n\t\tresize: none;\n\t}\n\t.error {\n\t\tcolor: var(--color-danger-alt);\n\t\tmargin-top: 1rem;\n\t\tmargin-bottom: 0;\n\t}\n`;\n\nexport default Field;\n"],"sourceRoot":""}